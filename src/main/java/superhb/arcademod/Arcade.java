package superhb.arcademod;

import com.google.gson.*;
import mcp.MethodsReturnNonnullByDefault;
import net.minecraft.util.JsonUtils;
import net.minecraftforge.common.ForgeVersion;
import net.minecraftforge.fml.common.*;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.common.versioning.ComparableVersion;
import org.apache.logging.log4j.*;
import superhb.arcademod.client.ArcadeItems;
import superhb.arcademod.proxy.CommonProxy;
import net.minecraft.client.resources.I18n;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.ItemStack;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.fml.common.Mod.*;
import net.minecraftforge.fml.common.event.*;
import superhb.arcademod.client.tileentity.*;
import superhb.arcademod.util.PrizeList;
import superhb.arcademod.util.prizebox.PrizeHelper;

import java.io.*;
import java.util.*;

/* Game List
    - Mrs. Pac-Man
    - Space Invaders
    - Donkey Kong (ReddyRedStoneOre) [CF]
    - Super Mario Bros (thatguyEnder) [CF]
    - Asteroids (WilchHabos) [CF]
    - Galaga (TheFroggyFrog) [CF]
    - DDR (GamerGuy941Ytube) [MCF]
    - Pinball
    - Centipede (Kaylagoodie) [PMC]
    - Bubble Bobble (pumpkin0022) [CF]
    - Raiden STG (sz0999312) [CF]
 */

/* Special Machines
    - Skeeball
    - Claw Machine
    - Coin Pusher
    - Stacker (The game with the square that has to line up)
 */

/* ChangeLog
	2.2.0
	- Added Space Invader
 */
@Mod(modid = Reference.MODID, name = Reference.NAME, version = Reference.VERSION, updateJSON = Reference.UPDATE_URL)
public class Arcade {
	@SidedProxy(clientSide = Reference.CLIENT_PROXY, serverSide = Reference.SERVER_PROXY)
	public static CommonProxy proxy;
	
	@Instance(Reference.MODID)
	public static Arcade instance;
	
	// Logger
	public static final Logger logger = LogManager.getLogger(Reference.MODID);
	
	// Creative Tab
	@MethodsReturnNonnullByDefault
	public static final CreativeTabs tab = new CreativeTabs(Reference.MODID) {
		@Override
		public ItemStack getTabIconItem () {
			return new ItemStack(ArcadeItems.COIN);
		}
		
		@Override
		public String getTranslatedTabLabel () {
			return I18n.format("mod.arcademod:name.locale");
		}
	};
	
	// ChangeLog Variables
	public static Set<Map.Entry<ComparableVersion, String>> changelog;
	public static ForgeVersion.Status status;
	
	// Configuration Variables
	public static boolean disableCoins;
	private static boolean requireRedstone;
	public static boolean disableUpdateNotification;
	
	// Prize List Variables
	public static PrizeList[] prizeList;
	private static JsonObject json;
	
	// Game Addons
	private static File gameDir;
	
	@EventHandler
	public void preInit (FMLPreInitializationEvent event) {
		// Mod info
		event.getModMetadata().autogenerated = false;
		event.getModMetadata().credits = Reference.CREDIT;
		event.getModMetadata().authorList.add(Reference.AUTHOR);
		event.getModMetadata().description = Reference.DESCRIPTION;
		event.getModMetadata().url = Reference.URL;
		event.getModMetadata().logoFile = Reference.LOGO;
		event.getModMetadata().updateJSON = Reference.UPDATE_URL;
		
		// Configuration File
		Configuration config = new Configuration(event.getSuggestedConfigurationFile());
		config.load();
		disableCoins = config.getBoolean("disableCoins", Configuration.CATEGORY_GENERAL, false, "Disable the need to use coins to play the arcade machines");
		requireRedstone = config.getBoolean("requireRedstone", Configuration.CATEGORY_GENERAL, false, "Require the machines to be powered by redstone to play");
		disableUpdateNotification = config.getBoolean("disableUpdateNotification", Configuration.CATEGORY_GENERAL, false, "Disable message in chat when update is available");
		config.save();
		
		// Game Addons
		gameDir = new File(event.getModConfigurationDirectory().getParent(), "/" + Reference.MODID + "/games");
		if (!gameDir.exists()) {
			logger.info("Games Addon directory doesn't exist. Creating empty folder...");
			gameDir.mkdir();
			gameDir.mkdirs();
		}
		
		// Prize List
		loadPrizeList(event);
		
		// Register TileEntity
		GameRegistry.registerTileEntity(TileEntityArcade.class, Reference.createResource("tile_arcade"));
		GameRegistry.registerTileEntity(TileEntityPlushie.class, Reference.createResource("tile_plushie"));
		GameRegistry.registerTileEntity(TileEntityPrize.class, Reference.createResource("tile_prize"));
		GameRegistry.registerTileEntity(TileEntityPusher.class, Reference.createResource("tile_pusher"));

		proxy.preInit(event);
	}
	
	@EventHandler
	public void init (FMLInitializationEvent event) {
		proxy.init(event);
	}
	
	@EventHandler
	public void postInit (FMLPostInitializationEvent event) {
		// Change Log
		for (ModContainer mod : Loader.instance().getModList()) {
			if (mod.getModId().equals(Reference.MODID)) {
				status = ForgeVersion.getResult(mod).status;
				if (status == ForgeVersion.Status.OUTDATED || status == ForgeVersion.Status.BETA_OUTDATED) changelog = ForgeVersion.getResult(mod).changes.entrySet();
			}
		}
		
		// Check for other mods here
		
		// Prize List
		initPrizeList();
		
		proxy.postInit(event);
	}
	
	private void loadPrizeList (FMLPreInitializationEvent event) {
		String dir = event.getModConfigurationDirectory().getParent() + "/" + Reference.MODID + "/prizelist.json";
		
		try {
			JsonParser parser = new JsonParser();
			JsonElement element = parser.parse(new FileReader(dir));
			json = element.getAsJsonObject();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			
			File list = new File(dir);
			try {
				list.createNewFile();
				exportResource("prizelist.json", dir);
				
				JsonParser parser = new JsonParser();
				JsonElement element = parser.parse(new FileReader(dir));
				json = element.getAsJsonObject();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
	}
	
	private void initPrizeList () {
		JsonArray prizes = json.getAsJsonArray("prizes");
		
		prizeList = new PrizeList[prizes.size()];
		for (int i = 0; i < prizes.size(); i++) {
			try {
				prizeList[i] = new PrizeList(PrizeHelper.getItemStack(prizes.get(i).getAsJsonObject()), JsonUtils.getInt(prizes.get(i).getAsJsonObject(), "cost"));
			} catch (JsonSyntaxException e) {
				throw new JsonSyntaxException("Item is missing 'cost' member. Item will not be added to Prize Counter");
			}
		}
	}
	
	private void exportResource (String name, String dir) throws Exception {
		InputStream in;
		OutputStream out;
		
		in = getClass().getClassLoader().getResourceAsStream(name);
		if (in == null) throw new Exception(String.format("Cannot get resource '%s' from JAR file", name));

		int readBytes;
		byte[] buffer = new byte[4096];
		out = new FileOutputStream(dir);

		while ((readBytes = in.read(buffer)) > 0) out.write(buffer, 0, readBytes);

		in.close();
		out.close();
	}
	
	// TODO: Game Addons
	// Gets files from /arcademod/games/ directory
	private void getAddons (List<File> games) {
		for (File game : games) {
			if (game.isDirectory()) {}
		}
	}
}
